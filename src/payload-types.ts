/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {
    button: Button;
    media: Media;
    gallery: Gallery;
    spacing: Spacing;
    divider: Divider;
    cardForm: CardForm;
    actions: Actions;
    baseContent: BaseContent;
    contentMedia: ContentMedia;
    collapsibleTab: CollapsibleTab;
    profileShowcase: ProfileShowcase;
    showReusable: ShowReusable;
    listingCertification: ListingCertification;
    listingExperience: ListingExperience;
    listingPortofolio: ListingPortofolio;
    listingPost: ListingPost;
    listingPostCategory: ListingPostCategory;
    listingTool: ListingTool;
    headingContent: HeadingContent;
    headingCertification: HeadingCertification;
    headingExperience: HeadingExperience;
    headingPortofolio: HeadingPortofolio;
    headingTool: HeadingTool;
    headingPost: HeadingPost;
  };
  collections: {
    asset: Asset;
    pages: Page;
    posts: Post;
    postCategories: PostCategory;
    portofolios: Portofolio;
    certifications: Certification;
    experiences: Experience;
    tools: Tool;
    reusables: Reusable;
    users: User;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    asset: AssetSelect<false> | AssetSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    postCategories: PostCategoriesSelect<false> | PostCategoriesSelect<true>;
    portofolios: PortofoliosSelect<false> | PortofoliosSelect<true>;
    certifications: CertificationsSelect<false> | CertificationsSelect<true>;
    experiences: ExperiencesSelect<false> | ExperiencesSelect<true>;
    tools: ToolsSelect<false> | ToolsSelect<true>;
    reusables: ReusablesSelect<false> | ReusablesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    profile: Profile;
    site: Site;
  };
  globalsSelect: {
    profile: ProfileSelect<false> | ProfileSelect<true>;
    site: SiteSelect<false> | SiteSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "button".
 */
export interface Button {
  label?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  link?: {
    href?: string | null;
    target?: ('_self' | '_blank' | '_parent' | '_top') | null;
  };
  icon?: {
    /**
     * Fill with name of icon from https://lucide.dev/icons
     */
    name?: string | null;
    /**
     * Number of rem.
     */
    size?: number | null;
    position?: ('left' | 'right') | null;
    color?: {
      base?:
        | (
            | 'inherit'
            | 'base'
            | 'primary'
            | 'primary-soft'
            | 'primary-dark'
            | 'secondary'
            | 'secondary-soft'
            | 'secondary-dark'
            | 'red'
            | 'red-soft'
            | 'red-dark'
            | 'orange'
            | 'orange-soft'
            | 'orange-dark'
            | 'amber'
            | 'amber-soft'
            | 'amber-dark'
            | 'yellow'
            | 'yellow-soft'
            | 'yellow-dark'
            | 'lime'
            | 'lime-soft'
            | 'lime-dark'
            | 'green'
            | 'green-soft'
            | 'green-dark'
            | 'emerald'
            | 'emerald-soft'
            | 'emerald-dark'
            | 'teal'
            | 'teal-soft'
            | 'teal-dark'
            | 'cyan'
            | 'cyan-soft'
            | 'cyan-dark'
            | 'sky'
            | 'sky-soft'
            | 'sky-dark'
            | 'blue'
            | 'blue-soft'
            | 'blue-dark'
            | 'indigo'
            | 'indigo-soft'
            | 'indigo-dark'
            | 'violet'
            | 'violet-soft'
            | 'violet-dark'
            | 'purple'
            | 'purple-soft'
            | 'purple-dark'
            | 'fuchsia'
            | 'fuchsia-soft'
            | 'fuchsia-dark'
            | 'pink'
            | 'pink-soft'
            | 'pink-dark'
            | 'rose'
            | 'rose-soft'
            | 'rose-dark'
            | 'gray'
            | 'gray-soft'
            | 'gray-dark'
            | 'black'
            | 'white'
            | 'customColor'
          )
        | null;
      /**
       * Fill the color with hex, rgb, or rgba
       */
      custom?: string | null;
    };
  };
  variant?: ('filled' | 'outline' | 'light' | 'subtle' | 'transparent') | null;
  size?: ('xs' | 'sm' | 'md' | 'lg' | 'xl') | null;
  align?: ('inline' | 'left' | 'right' | 'center' | 'full') | null;
  rounded?: {
    base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
    topLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    topRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
  };
  color?: {
    base?:
      | (
          | 'primary'
          | 'primary-soft'
          | 'primary-dark'
          | 'secondary'
          | 'secondary-soft'
          | 'secondary-dark'
          | 'red'
          | 'red-soft'
          | 'red-dark'
          | 'orange'
          | 'orange-soft'
          | 'orange-dark'
          | 'amber'
          | 'amber-soft'
          | 'amber-dark'
          | 'yellow'
          | 'yellow-soft'
          | 'yellow-dark'
          | 'lime'
          | 'lime-soft'
          | 'lime-dark'
          | 'green'
          | 'green-soft'
          | 'green-dark'
          | 'emerald'
          | 'emerald-soft'
          | 'emerald-dark'
          | 'teal'
          | 'teal-soft'
          | 'teal-dark'
          | 'cyan'
          | 'cyan-soft'
          | 'cyan-dark'
          | 'sky'
          | 'sky-soft'
          | 'sky-dark'
          | 'blue'
          | 'blue-soft'
          | 'blue-dark'
          | 'indigo'
          | 'indigo-soft'
          | 'indigo-dark'
          | 'violet'
          | 'violet-soft'
          | 'violet-dark'
          | 'purple'
          | 'purple-soft'
          | 'purple-dark'
          | 'fuchsia'
          | 'fuchsia-soft'
          | 'fuchsia-dark'
          | 'pink'
          | 'pink-soft'
          | 'pink-dark'
          | 'rose'
          | 'rose-soft'
          | 'rose-dark'
          | 'gray'
          | 'gray-soft'
          | 'gray-dark'
          | 'black'
          | 'white'
          | 'customColor'
        )
      | null;
    /**
     * Fill the color with hex, rgb, or rgba
     */
    custom?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'button';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  type?: ('image' | 'video') | null;
  source?: ('internal' | 'external') | null;
  imageInternal?: (number | null) | Asset;
  imageExternal?: string | null;
  videoInternal?: (number | null) | Asset;
  videoExternal?: string | null;
  videoOptions?: ('loop' | 'autoplay')[] | null;
  videoPoster?: (number | null) | Asset;
  action?: ('none' | 'link' | 'lightbox') | null;
  actionLink?: string | null;
  rounded?: {
    base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
    topLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    topRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
  };
  objectFit?: ('cover' | 'contain') | null;
  aspectRatio?: ('1/1' | '2/1' | '3/2' | '4/3' | '5/3' | '5/4' | '16/9' | '16/10') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'media';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "asset".
 */
export interface Asset {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery".
 */
export interface Gallery {
  display?: ('grid' | 'grid-slider') | null;
  items?:
    | {
        type?: ('image' | 'video') | null;
        source?: ('internal' | 'external') | null;
        imageInternal?: (number | null) | Asset;
        imageExternal?: string | null;
        videoInternal?: (number | null) | Asset;
        videoExternal?: string | null;
        videoOptions?: ('loop' | 'autoplay')[] | null;
        videoPoster?: (number | null) | Asset;
        action?: ('none' | 'link' | 'lightbox') | null;
        actionLink?: string | null;
        id?: string | null;
      }[]
    | null;
  column?: number | null;
  rounded?: {
    base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
    topLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    topRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
  };
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  objectFit?: ('cover' | 'contain') | null;
  aspectRatio?: ('1/1' | '2/1' | '3/2' | '4/3' | '5/3' | '5/4' | '16/9' | '16/10') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'gallery';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "spacing".
 */
export interface Spacing {
  /**
   * Fill the units with px, %, or em
   */
  height?: string | null;
  /**
   * Fill the units with px, %, or em
   */
  heightTablet?: string | null;
  /**
   * Fill the units with px, %, or em
   */
  heightMobile?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'spacing';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "divider".
 */
export interface Divider {
  height?: number | null;
  /**
   * Fill with name of icon from https://lucide.dev/icons
   */
  icon?: string | null;
  color?: {
    base?:
      | (
          | 'inherit'
          | 'base'
          | 'primary'
          | 'primary-soft'
          | 'primary-dark'
          | 'secondary'
          | 'secondary-soft'
          | 'secondary-dark'
          | 'red'
          | 'red-soft'
          | 'red-dark'
          | 'orange'
          | 'orange-soft'
          | 'orange-dark'
          | 'amber'
          | 'amber-soft'
          | 'amber-dark'
          | 'yellow'
          | 'yellow-soft'
          | 'yellow-dark'
          | 'lime'
          | 'lime-soft'
          | 'lime-dark'
          | 'green'
          | 'green-soft'
          | 'green-dark'
          | 'emerald'
          | 'emerald-soft'
          | 'emerald-dark'
          | 'teal'
          | 'teal-soft'
          | 'teal-dark'
          | 'cyan'
          | 'cyan-soft'
          | 'cyan-dark'
          | 'sky'
          | 'sky-soft'
          | 'sky-dark'
          | 'blue'
          | 'blue-soft'
          | 'blue-dark'
          | 'indigo'
          | 'indigo-soft'
          | 'indigo-dark'
          | 'violet'
          | 'violet-soft'
          | 'violet-dark'
          | 'purple'
          | 'purple-soft'
          | 'purple-dark'
          | 'fuchsia'
          | 'fuchsia-soft'
          | 'fuchsia-dark'
          | 'pink'
          | 'pink-soft'
          | 'pink-dark'
          | 'rose'
          | 'rose-soft'
          | 'rose-dark'
          | 'gray'
          | 'gray-soft'
          | 'gray-dark'
          | 'black'
          | 'white'
          | 'customColor'
        )
      | null;
    /**
     * Fill the color with hex, rgb, or rgba
     */
    custom?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'divider';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cardForm".
 */
export interface CardForm {
  heading?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  form?: (number | null) | Form;
  padding?: {
    /**
     * Fill the units with px, %, or em
     */
    top?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    bottom?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    left?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    right?: string | null;
  };
  rounded?: {
    base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
    topLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    topRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomLeft?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
    bottomRight?: {
      base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
      custom?: string | null;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'cardForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            multiple?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            allowedTypes?: ('image' | 'pdf')[] | null;
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'upload';
          }
        | {
            name: string;
            label?: string | null;
            placeholder?: string | null;
            defaultValue?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'telephone';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            column?: number | null;
            gap?: number | null;
            required?: boolean | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkboxOptions';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            column?: number | null;
            gap?: number | null;
            required?: boolean | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'radioOptions';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    url?: string | null;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  content?:
    | (
        | Actions
        | BaseContent
        | Button
        | CardForm
        | CollapsibleTab
        | ContentMedia
        | Divider
        | Gallery
        | HeadingCertification
        | HeadingContent
        | HeadingExperience
        | HeadingPortofolio
        | HeadingPost
        | HeadingTool
        | ListingCertification
        | ListingExperience
        | ListingPortofolio
        | ListingPost
        | ListingPostCategory
        | ListingTool
        | Media
        | ProfileShowcase
        | ShowReusable
        | Spacing
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Asset;
    schemaType?: ('WebPage' | 'AboutPage' | 'ContactPage' | 'FAQPage' | 'ProfilePage' | 'SearchResultsPage') | null;
    robots?: string | null;
    keywords?: string | null;
  };
  title: string;
  slug: string;
  link?: string | null;
  excerpt?: string | null;
  featuredImage?: (number | null) | Asset;
  parentPage?: (number | null) | Page;
  publishedAt?: string | null;
  author?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions".
 */
export interface Actions {
  items?:
    | {
        label?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        link?: {
          href?: string | null;
          target?: ('_self' | '_blank' | '_parent' | '_top') | null;
        };
        icon?: {
          /**
           * Fill with name of icon from https://lucide.dev/icons
           */
          name?: string | null;
          /**
           * Number of rem.
           */
          size?: number | null;
          position?: ('left' | 'right') | null;
          color?: {
            base?:
              | (
                  | 'inherit'
                  | 'base'
                  | 'primary'
                  | 'primary-soft'
                  | 'primary-dark'
                  | 'secondary'
                  | 'secondary-soft'
                  | 'secondary-dark'
                  | 'red'
                  | 'red-soft'
                  | 'red-dark'
                  | 'orange'
                  | 'orange-soft'
                  | 'orange-dark'
                  | 'amber'
                  | 'amber-soft'
                  | 'amber-dark'
                  | 'yellow'
                  | 'yellow-soft'
                  | 'yellow-dark'
                  | 'lime'
                  | 'lime-soft'
                  | 'lime-dark'
                  | 'green'
                  | 'green-soft'
                  | 'green-dark'
                  | 'emerald'
                  | 'emerald-soft'
                  | 'emerald-dark'
                  | 'teal'
                  | 'teal-soft'
                  | 'teal-dark'
                  | 'cyan'
                  | 'cyan-soft'
                  | 'cyan-dark'
                  | 'sky'
                  | 'sky-soft'
                  | 'sky-dark'
                  | 'blue'
                  | 'blue-soft'
                  | 'blue-dark'
                  | 'indigo'
                  | 'indigo-soft'
                  | 'indigo-dark'
                  | 'violet'
                  | 'violet-soft'
                  | 'violet-dark'
                  | 'purple'
                  | 'purple-soft'
                  | 'purple-dark'
                  | 'fuchsia'
                  | 'fuchsia-soft'
                  | 'fuchsia-dark'
                  | 'pink'
                  | 'pink-soft'
                  | 'pink-dark'
                  | 'rose'
                  | 'rose-soft'
                  | 'rose-dark'
                  | 'gray'
                  | 'gray-soft'
                  | 'gray-dark'
                  | 'black'
                  | 'white'
                  | 'customColor'
                )
              | null;
            /**
             * Fill the color with hex, rgb, or rgba
             */
            custom?: string | null;
          };
        };
        variant?: ('filled' | 'outline' | 'light' | 'subtle' | 'transparent') | null;
        size?: ('xs' | 'sm' | 'md' | 'lg' | 'xl') | null;
        align?: ('inline' | 'left' | 'right' | 'center' | 'full') | null;
        rounded?: {
          base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
          topLeft?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
          topRight?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
          bottomLeft?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
          bottomRight?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
        };
        color?: {
          base?:
            | (
                | 'primary'
                | 'primary-soft'
                | 'primary-dark'
                | 'secondary'
                | 'secondary-soft'
                | 'secondary-dark'
                | 'red'
                | 'red-soft'
                | 'red-dark'
                | 'orange'
                | 'orange-soft'
                | 'orange-dark'
                | 'amber'
                | 'amber-soft'
                | 'amber-dark'
                | 'yellow'
                | 'yellow-soft'
                | 'yellow-dark'
                | 'lime'
                | 'lime-soft'
                | 'lime-dark'
                | 'green'
                | 'green-soft'
                | 'green-dark'
                | 'emerald'
                | 'emerald-soft'
                | 'emerald-dark'
                | 'teal'
                | 'teal-soft'
                | 'teal-dark'
                | 'cyan'
                | 'cyan-soft'
                | 'cyan-dark'
                | 'sky'
                | 'sky-soft'
                | 'sky-dark'
                | 'blue'
                | 'blue-soft'
                | 'blue-dark'
                | 'indigo'
                | 'indigo-soft'
                | 'indigo-dark'
                | 'violet'
                | 'violet-soft'
                | 'violet-dark'
                | 'purple'
                | 'purple-soft'
                | 'purple-dark'
                | 'fuchsia'
                | 'fuchsia-soft'
                | 'fuchsia-dark'
                | 'pink'
                | 'pink-soft'
                | 'pink-dark'
                | 'rose'
                | 'rose-soft'
                | 'rose-dark'
                | 'gray'
                | 'gray-soft'
                | 'gray-dark'
                | 'black'
                | 'white'
                | 'customColor'
              )
            | null;
          /**
           * Fill the color with hex, rgb, or rgba
           */
          custom?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  align?: ('left' | 'right' | 'center') | null;
  direction?: ('row' | 'column') | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'actions';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "baseContent".
 */
export interface BaseContent {
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  align?: ('left' | 'right' | 'center') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'baseContent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "collapsibleTab".
 */
export interface CollapsibleTab {
  variant?: ('default' | 'contained' | 'filled' | 'separated') | null;
  items?:
    | {
        /**
         * Fill with name of icon from https://lucide.dev/icons
         */
        icon?: string | null;
        heading?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  iconColor?: {
    base?:
      | (
          | 'inherit'
          | 'base'
          | 'primary'
          | 'primary-soft'
          | 'primary-dark'
          | 'secondary'
          | 'secondary-soft'
          | 'secondary-dark'
          | 'red'
          | 'red-soft'
          | 'red-dark'
          | 'orange'
          | 'orange-soft'
          | 'orange-dark'
          | 'amber'
          | 'amber-soft'
          | 'amber-dark'
          | 'yellow'
          | 'yellow-soft'
          | 'yellow-dark'
          | 'lime'
          | 'lime-soft'
          | 'lime-dark'
          | 'green'
          | 'green-soft'
          | 'green-dark'
          | 'emerald'
          | 'emerald-soft'
          | 'emerald-dark'
          | 'teal'
          | 'teal-soft'
          | 'teal-dark'
          | 'cyan'
          | 'cyan-soft'
          | 'cyan-dark'
          | 'sky'
          | 'sky-soft'
          | 'sky-dark'
          | 'blue'
          | 'blue-soft'
          | 'blue-dark'
          | 'indigo'
          | 'indigo-soft'
          | 'indigo-dark'
          | 'violet'
          | 'violet-soft'
          | 'violet-dark'
          | 'purple'
          | 'purple-soft'
          | 'purple-dark'
          | 'fuchsia'
          | 'fuchsia-soft'
          | 'fuchsia-dark'
          | 'pink'
          | 'pink-soft'
          | 'pink-dark'
          | 'rose'
          | 'rose-soft'
          | 'rose-dark'
          | 'gray'
          | 'gray-soft'
          | 'gray-dark'
          | 'black'
          | 'white'
          | 'customColor'
        )
      | null;
    /**
     * Fill the color with hex, rgb, or rgba
     */
    custom?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'collapsibleTab';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contentMedia".
 */
export interface ContentMedia {
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  actions?:
    | {
        label?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        link?: {
          href?: string | null;
          target?: ('_self' | '_blank' | '_parent' | '_top') | null;
        };
        icon?: {
          /**
           * Fill with name of icon from https://lucide.dev/icons
           */
          name?: string | null;
          /**
           * Number of rem.
           */
          size?: number | null;
          position?: ('left' | 'right') | null;
          color?: {
            base?:
              | (
                  | 'inherit'
                  | 'base'
                  | 'primary'
                  | 'primary-soft'
                  | 'primary-dark'
                  | 'secondary'
                  | 'secondary-soft'
                  | 'secondary-dark'
                  | 'red'
                  | 'red-soft'
                  | 'red-dark'
                  | 'orange'
                  | 'orange-soft'
                  | 'orange-dark'
                  | 'amber'
                  | 'amber-soft'
                  | 'amber-dark'
                  | 'yellow'
                  | 'yellow-soft'
                  | 'yellow-dark'
                  | 'lime'
                  | 'lime-soft'
                  | 'lime-dark'
                  | 'green'
                  | 'green-soft'
                  | 'green-dark'
                  | 'emerald'
                  | 'emerald-soft'
                  | 'emerald-dark'
                  | 'teal'
                  | 'teal-soft'
                  | 'teal-dark'
                  | 'cyan'
                  | 'cyan-soft'
                  | 'cyan-dark'
                  | 'sky'
                  | 'sky-soft'
                  | 'sky-dark'
                  | 'blue'
                  | 'blue-soft'
                  | 'blue-dark'
                  | 'indigo'
                  | 'indigo-soft'
                  | 'indigo-dark'
                  | 'violet'
                  | 'violet-soft'
                  | 'violet-dark'
                  | 'purple'
                  | 'purple-soft'
                  | 'purple-dark'
                  | 'fuchsia'
                  | 'fuchsia-soft'
                  | 'fuchsia-dark'
                  | 'pink'
                  | 'pink-soft'
                  | 'pink-dark'
                  | 'rose'
                  | 'rose-soft'
                  | 'rose-dark'
                  | 'gray'
                  | 'gray-soft'
                  | 'gray-dark'
                  | 'black'
                  | 'white'
                  | 'customColor'
                )
              | null;
            /**
             * Fill the color with hex, rgb, or rgba
             */
            custom?: string | null;
          };
        };
        variant?: ('filled' | 'outline' | 'light' | 'subtle' | 'transparent') | null;
        size?: ('xs' | 'sm' | 'md' | 'lg' | 'xl') | null;
        align?: ('inline' | 'left' | 'right' | 'center' | 'full') | null;
        rounded?: {
          base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
          topLeft?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
          topRight?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
          bottomLeft?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
          bottomRight?: {
            base?: ('none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | 'full' | 'custom') | null;
            custom?: string | null;
          };
        };
        color?: {
          base?:
            | (
                | 'primary'
                | 'primary-soft'
                | 'primary-dark'
                | 'secondary'
                | 'secondary-soft'
                | 'secondary-dark'
                | 'red'
                | 'red-soft'
                | 'red-dark'
                | 'orange'
                | 'orange-soft'
                | 'orange-dark'
                | 'amber'
                | 'amber-soft'
                | 'amber-dark'
                | 'yellow'
                | 'yellow-soft'
                | 'yellow-dark'
                | 'lime'
                | 'lime-soft'
                | 'lime-dark'
                | 'green'
                | 'green-soft'
                | 'green-dark'
                | 'emerald'
                | 'emerald-soft'
                | 'emerald-dark'
                | 'teal'
                | 'teal-soft'
                | 'teal-dark'
                | 'cyan'
                | 'cyan-soft'
                | 'cyan-dark'
                | 'sky'
                | 'sky-soft'
                | 'sky-dark'
                | 'blue'
                | 'blue-soft'
                | 'blue-dark'
                | 'indigo'
                | 'indigo-soft'
                | 'indigo-dark'
                | 'violet'
                | 'violet-soft'
                | 'violet-dark'
                | 'purple'
                | 'purple-soft'
                | 'purple-dark'
                | 'fuchsia'
                | 'fuchsia-soft'
                | 'fuchsia-dark'
                | 'pink'
                | 'pink-soft'
                | 'pink-dark'
                | 'rose'
                | 'rose-soft'
                | 'rose-dark'
                | 'gray'
                | 'gray-soft'
                | 'gray-dark'
                | 'black'
                | 'white'
                | 'customColor'
              )
            | null;
          /**
           * Fill the color with hex, rgb, or rgba
           */
          custom?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  media?: {
    type?: ('image' | 'video') | null;
    source?: ('internal' | 'external') | null;
    imageInternal?: (number | null) | Asset;
    imageExternal?: string | null;
    videoInternal?: (number | null) | Asset;
    videoExternal?: string | null;
    videoOptions?: ('loop' | 'autoplay')[] | null;
    videoPoster?: (number | null) | Asset;
    action?: ('none' | 'link' | 'lightbox') | null;
    actionLink?: string | null;
    id?: string | null;
  };
  align?: ('left' | 'right' | 'center') | null;
  desktopPosition?: ('content-media' | 'media-content') | null;
  mobilePosition?: ('content-media' | 'media-content') | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'contentMedia';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "headingCertification".
 */
export interface HeadingCertification {
  heading?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  type?: ('certifications' | 'selectedCertifications' | 'selectedTools' | 'search') | null;
  selectedCertifications?: (number | Certification)[] | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('startDate' | 'date' | 'title') | null;
  total?: number | null;
  align?: ('left' | 'center' | 'right') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'headingCertification';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certifications".
 */
export interface Certification {
  id: number;
  title?: string | null;
  publisher?: string | null;
  linkCourse?: string | null;
  startDate?: string | null;
  /**
   * Leave blank for ongoing
   */
  endDate?: string | null;
  skills?: (number | Tool)[] | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  certificate?: (number | null) | Asset;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tools".
 */
export interface Tool {
  id: number;
  title?: string | null;
  slogan?: string | null;
  icon?: (number | null) | Asset;
  link?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "headingContent".
 */
export interface HeadingContent {
  heading?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  align?: ('left' | 'center' | 'right') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'headingContent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "headingExperience".
 */
export interface HeadingExperience {
  heading?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  type?: ('experiences' | 'selectedExperiences' | 'selectedTools' | 'search') | null;
  selectedExperiences?: (number | Experience)[] | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('startDate' | 'date' | 'title') | null;
  total?: number | null;
  align?: ('left' | 'center' | 'right') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'headingExperience';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiences".
 */
export interface Experience {
  id: number;
  company?: string | null;
  title?: string | null;
  status?: string | null;
  location?: string | null;
  startDate?: string | null;
  /**
   * Leave blank for ongoing
   */
  endDate?: string | null;
  skills?: (number | Tool)[] | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  gallery?: (number | Asset)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "headingPortofolio".
 */
export interface HeadingPortofolio {
  heading?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  type?: ('portofolios' | 'selectedPortofolios' | 'selectedTools' | 'search') | null;
  selectedPortofolios?: (number | Portofolio)[] | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('launchDate' | 'date' | 'title') | null;
  total?: number | null;
  align?: ('left' | 'center' | 'right') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'headingPortofolio';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "portofolios".
 */
export interface Portofolio {
  id: number;
  launchDate?: string | null;
  skills?: (number | Tool)[] | null;
  actions?:
    | {
        /**
         * Fill with name of icon from https://lucide.dev/icons
         */
        icon?: string | null;
        label?: string | null;
        link?: string | null;
        id?: string | null;
      }[]
    | null;
  content?:
    | (
        | Actions
        | BaseContent
        | Button
        | CardForm
        | CollapsibleTab
        | ContentMedia
        | Divider
        | Gallery
        | HeadingCertification
        | HeadingContent
        | HeadingExperience
        | HeadingPortofolio
        | HeadingPost
        | HeadingTool
        | ListingCertification
        | ListingExperience
        | ListingPortofolio
        | ListingPost
        | ListingPostCategory
        | ListingTool
        | Media
        | ProfileShowcase
        | ShowReusable
        | Spacing
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Asset;
    schemaType?: ('WebPage' | 'AboutPage' | 'ContactPage' | 'FAQPage' | 'ProfilePage' | 'SearchResultsPage') | null;
    robots?: string | null;
    keywords?: string | null;
  };
  title: string;
  slug: string;
  link?: string | null;
  excerpt?: string | null;
  featuredImage?: (number | null) | Asset;
  publishedAt?: string | null;
  author?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "headingPost".
 */
export interface HeadingPost {
  heading?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  type?: ('posts' | 'selectedPosts' | 'selectedCategories' | 'search') | null;
  selectedPosts?: (number | Post)[] | null;
  selectedCategories?: (number | PostCategory)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('date' | 'title') | null;
  total?: number | null;
  align?: ('left' | 'center' | 'right') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'headingPost';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  content?:
    | (
        | Actions
        | BaseContent
        | Button
        | CardForm
        | CollapsibleTab
        | ContentMedia
        | Divider
        | Gallery
        | HeadingCertification
        | HeadingContent
        | HeadingExperience
        | HeadingPortofolio
        | HeadingPost
        | HeadingTool
        | ListingCertification
        | ListingExperience
        | ListingPortofolio
        | ListingPost
        | ListingPostCategory
        | ListingTool
        | Media
        | ProfileShowcase
        | ShowReusable
        | Spacing
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Asset;
    schemaType?: ('WebPage' | 'AboutPage' | 'ContactPage' | 'FAQPage' | 'ProfilePage' | 'SearchResultsPage') | null;
    robots?: string | null;
    keywords?: string | null;
  };
  title: string;
  slug: string;
  link?: string | null;
  excerpt?: string | null;
  featuredImage?: (number | null) | Asset;
  category?: (number | null) | PostCategory;
  publishedAt?: string | null;
  author?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "headingTool".
 */
export interface HeadingTool {
  heading?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  type?: ('tools' | 'selectedTools' | 'search') | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('date' | 'title') | null;
  total?: number | null;
  align?: ('left' | 'center' | 'right') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'headingTool';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "listingCertification".
 */
export interface ListingCertification {
  type?: ('certifications' | 'selectedCertifications' | 'selectedTools' | 'search') | null;
  selectedCertifications?: (number | Certification)[] | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('date' | 'title') | null;
  total?: number | null;
  showFilter?: boolean | null;
  pagination?: ('none' | 'paged' | 'load-more' | 'infinite-scroll') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingCertification';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "listingExperience".
 */
export interface ListingExperience {
  type?: ('experiences' | 'selectedExperiences' | 'selectedTools' | 'search') | null;
  selectedExperiences?: (number | Experience)[] | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('startDate' | 'date' | 'title') | null;
  total?: number | null;
  showFilter?: boolean | null;
  pagination?: ('none' | 'paged' | 'load-more' | 'infinite-scroll') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingExperience';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "listingPortofolio".
 */
export interface ListingPortofolio {
  type?: ('portofolios' | 'selectedPortofolios' | 'selectedTools' | 'search') | null;
  selectedPortofolios?: (number | Portofolio)[] | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('launchDate' | 'date' | 'title') | null;
  total?: number | null;
  showFilter?: boolean | null;
  pagination?: ('none' | 'paged' | 'load-more' | 'infinite-scroll') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingPortofolio';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "listingPost".
 */
export interface ListingPost {
  type?: ('posts' | 'selectedPosts' | 'selectedCategories' | 'search') | null;
  selectedPosts?: (number | Post)[] | null;
  selectedCategories?: (number | PostCategory)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('date' | 'title') | null;
  total?: number | null;
  showFilter?: boolean | null;
  pagination?: ('none' | 'paged' | 'load-more' | 'infinite-scroll') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingPost';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "postCategories".
 */
export interface PostCategory {
  id: number;
  title: string;
  slug: string;
  link?: string | null;
  excerpt?: string | null;
  featuredImage?: (number | null) | Asset;
  publishedAt?: string | null;
  author?: (number | null) | User;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Asset;
    schemaType?: ('WebPage' | 'AboutPage' | 'ContactPage' | 'FAQPage' | 'ProfilePage' | 'SearchResultsPage') | null;
    robots?: string | null;
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  role?: ('admin' | 'editor' | 'author') | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "listingPostCategory".
 */
export interface ListingPostCategory {
  type?: ('categories' | 'selectedCategories' | 'search') | null;
  selectedCategories?: (number | PostCategory)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('date' | 'title') | null;
  total?: number | null;
  pagination?: ('none' | 'paged' | 'load-more' | 'infinite-scroll') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingPostCategory';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "listingTool".
 */
export interface ListingTool {
  type?: ('tools' | 'selectedTools' | 'search') | null;
  selectedTools?: (number | Tool)[] | null;
  search?: string | null;
  order?: ('DESC' | 'ASC') | null;
  orderBy?: ('date' | 'title') | null;
  total?: number | null;
  pagination?: ('none' | 'paged' | 'load-more' | 'infinite-scroll') | null;
  column?: number | null;
  gap?: {
    /**
     * Fill the units with px, %, or em
     */
    base?: string | null;
    /**
     * Fill the units with px, %, or em
     */
    vertical?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingTool';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profileShowcase".
 */
export interface ProfileShowcase {
  socials?:
    | (
        | 'email'
        | 'telephone'
        | 'address'
        | 'linkedin'
        | 'instagram'
        | 'tiktok'
        | 'youtube'
        | 'facebook'
        | 'twitter'
        | 'github'
      )[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'profileShowcase';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "showReusable".
 */
export interface ShowReusable {
  reusable?: (number | null) | Reusable;
  id?: string | null;
  blockName?: string | null;
  blockType: 'showReusable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reusables".
 */
export interface Reusable {
  id: number;
  content?:
    | (
        | Actions
        | BaseContent
        | Button
        | CardForm
        | CollapsibleTab
        | ContentMedia
        | Divider
        | Gallery
        | HeadingCertification
        | HeadingContent
        | HeadingExperience
        | HeadingPortofolio
        | HeadingPost
        | HeadingTool
        | ListingCertification
        | ListingExperience
        | ListingPortofolio
        | ListingPost
        | ListingPostCategory
        | ListingTool
        | Media
        | ShowReusable
        | Spacing
      )[]
    | null;
  title: string;
  slug: string;
  link?: string | null;
  excerpt?: string | null;
  featuredImage?: (number | null) | Asset;
  publishedAt?: string | null;
  author?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'asset';
        value: number | Asset;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'postCategories';
        value: number | PostCategory;
      } | null)
    | ({
        relationTo: 'portofolios';
        value: number | Portofolio;
      } | null)
    | ({
        relationTo: 'certifications';
        value: number | Certification;
      } | null)
    | ({
        relationTo: 'experiences';
        value: number | Experience;
      } | null)
    | ({
        relationTo: 'tools';
        value: number | Tool;
      } | null)
    | ({
        relationTo: 'reusables';
        value: number | Reusable;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "asset_select".
 */
export interface AssetSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  content?: T | {};
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        schemaType?: T;
        robots?: T;
        keywords?: T;
      };
  title?: T;
  slug?: T;
  link?: T;
  excerpt?: T;
  featuredImage?: T;
  parentPage?: T;
  publishedAt?: T;
  author?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  content?: T | {};
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        schemaType?: T;
        robots?: T;
        keywords?: T;
      };
  title?: T;
  slug?: T;
  link?: T;
  excerpt?: T;
  featuredImage?: T;
  category?: T;
  publishedAt?: T;
  author?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "postCategories_select".
 */
export interface PostCategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  link?: T;
  excerpt?: T;
  featuredImage?: T;
  publishedAt?: T;
  author?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        schemaType?: T;
        robots?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "portofolios_select".
 */
export interface PortofoliosSelect<T extends boolean = true> {
  launchDate?: T;
  skills?: T;
  actions?:
    | T
    | {
        icon?: T;
        label?: T;
        link?: T;
        id?: T;
      };
  content?: T | {};
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        schemaType?: T;
        robots?: T;
        keywords?: T;
      };
  title?: T;
  slug?: T;
  link?: T;
  excerpt?: T;
  featuredImage?: T;
  publishedAt?: T;
  author?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certifications_select".
 */
export interface CertificationsSelect<T extends boolean = true> {
  title?: T;
  publisher?: T;
  linkCourse?: T;
  startDate?: T;
  endDate?: T;
  skills?: T;
  content?: T;
  certificate?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiences_select".
 */
export interface ExperiencesSelect<T extends boolean = true> {
  company?: T;
  title?: T;
  status?: T;
  location?: T;
  startDate?: T;
  endDate?: T;
  skills?: T;
  description?: T;
  gallery?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tools_select".
 */
export interface ToolsSelect<T extends boolean = true> {
  title?: T;
  slogan?: T;
  icon?: T;
  link?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reusables_select".
 */
export interface ReusablesSelect<T extends boolean = true> {
  content?: T | {};
  title?: T;
  slug?: T;
  link?: T;
  excerpt?: T;
  featuredImage?: T;
  publishedAt?: T;
  author?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              multiple?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        upload?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              allowedTypes?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        telephone?:
          | T
          | {
              name?: T;
              label?: T;
              placeholder?: T;
              defaultValue?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        checkboxOptions?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              column?: T;
              gap?: T;
              required?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        radioOptions?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              column?: T;
              gap?: T;
              required?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profile".
 */
export interface Profile {
  id: number;
  avatar?: (number | null) | Asset;
  avatarAlt?: (number | null) | Asset;
  name?: string | null;
  title?: string | null;
  slogan?: string | null;
  socials?: {
    email?: string | null;
    telephone?: string | null;
    address?: string | null;
    linkedin?: string | null;
    instagram?: string | null;
    tiktok?: string | null;
    youtube?: string | null;
    facebook?: string | null;
    twitter?: string | null;
    github?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site".
 */
export interface Site {
  id: number;
  title?: string | null;
  favicon?: (number | null) | Asset;
  darkTheme?: boolean | null;
  logo?: (number | null) | Asset;
  navigation?:
    | {
        label?: string | null;
        link?: string | null;
        submenu?:
          | {
              label?: string | null;
              link?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  colophon?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Encourage search engines from indexing this site
   */
  sitePublicly?: boolean | null;
  /**
   * Add your Google Analytics ID
   */
  googleAnalytics?: string | null;
  /**
   * Add your Google Tag Manager ID
   */
  googleTagManager?: string | null;
  /**
   * Add your Meta Pixel ID
   */
  metaPixelID?: string | null;
  /**
   * Add your TikTok Pixel ID
   */
  tiktokPixelID?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profile_select".
 */
export interface ProfileSelect<T extends boolean = true> {
  avatar?: T;
  avatarAlt?: T;
  name?: T;
  title?: T;
  slogan?: T;
  socials?:
    | T
    | {
        email?: T;
        telephone?: T;
        address?: T;
        linkedin?: T;
        instagram?: T;
        tiktok?: T;
        youtube?: T;
        facebook?: T;
        twitter?: T;
        github?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site_select".
 */
export interface SiteSelect<T extends boolean = true> {
  title?: T;
  favicon?: T;
  darkTheme?: T;
  logo?: T;
  navigation?:
    | T
    | {
        label?: T;
        link?: T;
        submenu?:
          | T
          | {
              label?: T;
              link?: T;
              id?: T;
            };
        id?: T;
      };
  colophon?: T;
  sitePublicly?: T;
  googleAnalytics?: T;
  googleTagManager?: T;
  metaPixelID?: T;
  tiktokPixelID?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}